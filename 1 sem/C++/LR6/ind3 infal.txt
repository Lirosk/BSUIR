#include <iostream>

void fillchange(char letter, char* change, short int seqlen)
{
	for (int k = 5; k < 24; k++)
	{
		change[k] = ' ';
	}

	int numlen, num = (int)letter, por = 5;
	for (numlen = 0; num > 0; numlen++)
	{
		num /= 10;
	}

	num = (int)letter;

	for (int k = 0; k < numlen; k++)
	{
		change[por + k] = num / (int)pow(10, numlen - 1 - k) + '0';
		num %= (int)pow(10, numlen - 1 - k);
	}

	por += numlen;

	change[por] = ' '; por += 1;

	num = seqlen;
	for (numlen = 0; num > 0; numlen++)
	{
		num /= 10;
	}
	num = seqlen;

	for (int k = 0; k < numlen; k++)
	{
		change[por + k] = (int)(num / (int)pow(10, numlen - 1 - k)) + '0'; //((int)(num / (int)pow(10, numlen - 1 - k)) == 0)?('0'):((int)(num / (int)pow(10, numlen - 1 - k)) + '0');
		num %= (int)pow(10, numlen - 1 - k);
	}
	por += numlen;

	change[por] = ')'; change[por + 1] = '\0';

}



int main()
{
	while (1)
	{
		char change[25] = { '(','2','5','5',' ' }, doppel;

		const int N = 1, M = 100;

		char array[N][M + 1];
		int seqlen, changelen;

		for (int i = 0; i < N; i++)
		{
			std::cout << "Enter " << i + 1 << " line of array:\n";
			gets_s(array[i]);
			for (int j = 0; j < M; j++)
			{
				doppel = array[i][j];
				for (seqlen = 0; array[i][j + seqlen] == doppel; seqlen++) {}
				j += seqlen;

				if ((seqlen < 2)) continue;

				fillchange(doppel, change, seqlen);
				for (changelen = 0; change[changelen] != '\0'; changelen++) {}


				if ((changelen > seqlen))
				{
					for (int k = sizeof(array[i]) - 1; k > j; k--)
					{
						array[i][j] = array[i][k - (changelen - seqlen)];
					}

					for (int k = 0; k < changelen; k++)
					{
						array[i][j - seqlen + k] = change[k];
					}
				}

				j -= seqlen - changelen;
			}
		}

		for (int i = 0; i < N; i++)
		{
			for (int j = 0; (array[i][j] != '\0') & (array[i][j] != NULL); j++)
			{
				std::cout << array[i][j];
			}
			std::cout << '\n';
		}
		std::cout << "\n\n\n\n\n\n\n\n";
	}
	return 0;
}